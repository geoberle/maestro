// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../openapi/openapi.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x8f\xdb\xb8\x11\x7f\xf7\xa7\x18\xa0\x2d\x7c\x39\x78\x6d\xa7\x77\x05\x5a\x23\x39\x20\xb9\x5e\x8a\x3b\xe4\x92\x34\x9b\xb4\x0f\x45\xb1\x4b\x93\x23\x8b\xb7\x12\xa9\x90\xd4\xee\x3a\x6d\xbf\x7b\x41\x52\xff\x2d\x69\x65\x63\x37\x56\x16\xde\x97\x58\xd4\x70\x38\x33\x9c\xf9\x71\xc8\xa1\x22\x13\x14\x24\xe1\x2b\xf8\x6e\xbe\x9c\x2f\x27\x5c\x04\x72\x35\x01\x30\xdc\x44\xb8\x82\x98\xa0\x36\x4a\xc2\x39\xaa\x6b\x4e\x11\x5e\xbc\xfb\x79\x02\xc0\x50\x53\xc5\x13\xc3\xa5\xe8\x22\xb9\x46\xa5\xdd\xeb\xe5\x7c\x39\x7f\x3a\xd1\xa8\x6c\x8b\xe5\x7c\x06\xa9\x8a\x56\x10\x1a\x93\xac\x16\x8b\x48\x52\x12\x85\x52\x9b\xd5\x9f\x97\xcb\xe5\x04\xa0\xc1\x9d\xa6\x4a\xa1\x30\xc0\x64\x4c\xb8\xa8\x77\xd7\xab\xc5\x82\x24\x7c\x6e\x55\xd0\x21\x0f\xcc\x9c\xca\x78\x97\xc5\xaf\x84\x0b\xf8\x26\x51\x92\xa5\xd4\xb6\x3c\x01\x2f\x4d\x3b\x33\x6d\xc8\x06\xef\x62\x79\x6e\xc8\x86\x8b\x4d\xce\x28\x21\x26\x74\xba\x59\x0e\x8b\xcc\x20\x8b\xeb\xa7\x0b\x85\x5a\xa6\x8a\xa2\x7b\x09\xb0\x41\xe3\x7f\x00\xe8\x34\x8e\x89\xda\xae\xe0\x3d\x9a\x54\x09\x0d\x04\x22\xae\x0d\xc8\x00\x8a\x4e\x39\x29\xd2\x54\x71\xb3\xcd\xbb\x5a\xb1\x5f\x22\x51\xa8\x56\xf0\xaf\x7f\x67\x8d\x0a\x75\x22\x85\xce\x47\xb2\x7f\xd3\x3f\x2e\x97\xd3\xf2\xb1\xa1\xc2\x0b\xf8\xe5\xfc\xed\x1b\x20\x4a\x91\x6d\x75\x54\x90\xeb\xdf\x90\x1a\x5d\xe9\x47\xa5\x30\x28\x4c\x95\x15\x00\x49\x92\x88\x53\x62\x99\x2d\x7e\xd3\x52\xd4\xdf\x02\x68\x1a\x62\x4c\x9a\xad\x00\xbf\x57\x18\xac\x60\xfa\xbb\x05\x95\x71\x22\x05\x0a\xa3\x17\x9e\x56\x2f\xde\x67\x32\xbc\xe6\xda\x4c\x4b\x3d\xbe\x5f\x3e\xed\xd1\x23\x35\x21\x18\x79\x85\x02\xb8\x06\x2e\xae\x49\xc4\xd9\x31\x84\xff\x49\x29\xa9\x6a\x52\x7f\xd7\x2d\xf5\x47\x41\x52\x13\x4a\xc5\x3f\x23\x03\x23\x21\x41\x15\x48\x15\x83\x4c\x50\x39\xb1\xc6\xa0\xc1\x9f\xfa\xfc\xe7\xa3\xc0\xdb\x04\xa9\x41\x06\x68\xfb\x81\xa4\x2e\x56\x8f\x6f\xfb\x84\x28\x12\xa3\xc9\xe0\x06\x5c\xbc\xb4\x75\x2e\xe9\x16\x09\xd9\xe0\x74\x28\xb1\xe6\x9f\xf7\x20\x46\xa2\x68\x38\x98\x5c\x2a\x86\xea\xe5\x76\x30\x7d\xc0\x31\x62\xda\x93\x27\x16\x45\x9b\xf0\xf2\xa3\x42\x62\x10\x08\x08\xbc\x29\x62\x7c\x3f\x60\xf9\x94\xa2\x36\x2f\x25\xab\xd0\xd5\x3c\x21\x8f\x5a\x60\xc4\x90\x82\xc4\xf6\xe3\x0a\xd9\x0a\x8c\x4a\x71\xd2\xe3\x12\xfd\x0e\xd1\xee\x0e\x43\x50\x64\xda\x0b\x8d\x3d\x90\xe2\x6d\x76\x14\x47\x6e\xca\xee\x70\xa4\x27\x0a\xff\x61\xd1\xce\x89\xe0\xa3\x50\x8f\x27\x0c\x4f\xc0\x7d\x44\x0d\xfe\xd2\xad\x41\x11\xae\x24\x52\x48\xd8\x16\xf0\x96\xeb\xe3\xac\xf7\x7b\x2d\x38\x2f\x04\xa4\x5d\x6b\x0e\x50\x1b\xb2\x36\x23\x33\x21\x36\x61\xee\x38\x2a\x75\xa6\x82\x8b\xff\x70\xf6\xbf\xee\x7c\xf0\x6f\x68\x80\x88\x32\x1d\x5b\x6f\xa1\x08\x8b\x87\xc9\x04\x0b\x87\x08\x64\x2a\x58\x6d\xc0\x2f\x6a\xba\x56\xec\x3b\x01\xc8\x71\x34\xf8\xbe\x5b\x83\x37\xb2\xf4\xce\x1b\x6e\x42\xd0\x09\x52\x1e\x70\x64\xc0\xd9\xd7\x82\x26\x63\x4d\x5f\x13\x62\x68\xb8\x03\x0a\x1f\x13\xe6\xb2\x38\xf1\x40\x29\x9c\xe7\xcf\xca\x79\x1d\x59\x2a\xf7\xce\x5a\xe5\xbd\x57\xa3\x3f\xad\x1b\x82\x73\x69\xa6\xad\x4e\x29\x45\xad\x83\x34\x8a\xb6\xa3\x01\xbc\x53\xb2\xf7\x85\xa5\x3e\x61\xf5\x28\x94\x78\x84\x19\xeb\xce\x1a\xe3\x80\xc7\x66\xa9\xa3\xc8\x50\xad\xb4\x11\x1a\xdc\x59\x6d\xfe\xea\x9a\x81\x1c\xb8\xd8\xb4\xc1\x72\x8f\x8b\x96\xc7\x07\x6e\xd8\x0e\x58\x3e\x21\xe3\x97\x97\xfa\x84\x8c\x23\x50\x62\x3f\x84\x71\x31\x34\x22\x84\x69\x9e\xc5\xde\x79\xa0\xc9\x59\xdb\xe6\x99\x4a\xa1\xd3\xb8\xe0\x32\xac\x8e\x52\x74\x7a\xd0\xdd\x73\xb3\x8e\x92\x8f\x7a\xcc\x3a\xca\x8f\x99\x0c\xa7\x3a\xca\x28\x70\xe8\xab\xdc\x88\xb6\xd5\x51\xf6\xac\xa4\xec\x59\x4b\xd9\xbb\x9a\xb2\x7f\x3d\xe5\xde\x2b\x2a\x79\xb4\xdf\xef\x76\x3c\x8f\xdf\xb1\x6c\xc3\x73\x79\xbe\xc6\x8a\x4a\x53\xf6\x53\x2a\x79\x82\xf0\x43\x34\xe8\xd9\x9f\x16\xe1\xfa\x95\xed\x4f\x87\x57\x54\x1a\x30\x77\x1c\x95\x3a\x93\xc2\x61\x15\x95\x22\x31\x7b\xf8\x8a\x4a\xe1\x10\x47\xae\xa8\xb4\x62\xdf\x09\x40\xc6\xb8\x17\x2d\xbc\xf3\xf1\xec\x45\x47\xb2\x6e\xde\x55\x51\x79\x98\x14\x2e\xaf\xa8\xd0\x91\xa6\x72\xf7\x52\x51\x29\x70\x6e\x2c\x15\x95\x53\xb2\x37\x06\xa9\x4f\x58\x3d\x0a\x25\x1e\x61\xc6\xda\x5d\x51\x19\x45\x86\x7a\x77\x45\xe5\xb0\xc5\x66\xcf\x8a\x4a\x79\x7c\x70\xaa\xa8\x9c\x90\xf1\x7e\x35\x78\x04\xc8\x78\x60\x45\x65\x24\x08\x73\xc0\xed\x76\xce\xa6\x93\xf2\x8d\xed\x96\xe3\xce\xb9\xe5\x9f\x03\x4b\x06\x3c\x19\x57\xb3\x4d\xd0\x7f\x19\x33\xa9\xc8\x8d\x2b\x58\x3b\xb2\xac\xd1\x3f\xbc\x92\x2a\x26\x66\x05\xbf\xfc\xf3\xc3\x24\x57\x30\x63\xfa\xd6\x55\x41\xde\x63\x80\x0a\x05\xc5\x3a\x77\x5f\x22\xc9\x9a\x12\x65\x5d\xdd\xf0\x2a\xce\x71\x56\xb5\x93\xef\xa4\x8d\xe2\x62\x53\x34\x5f\x71\x71\x37\x51\x68\x0d\xd4\x47\xf4\x9a\x97\x27\xbd\x03\x65\x1b\x34\x70\x42\x36\xb8\x4b\xc4\x85\xc1\x4d\xc5\x93\x34\xff\x3c\x80\xca\x48\x43\xa2\xbb\xc8\x8a\x9d\x45\x65\x45\xb1\x92\x56\x1e\xad\x4c\x95\x47\x3b\x78\xe5\xd1\x8d\x52\x79\xe6\x06\x63\x1f\xb6\xce\x09\x73\xbe\x24\x8a\xde\x06\xfd\x1e\x98\x3b\x6f\xc3\x05\xca\x6f\x1b\x5a\x0c\xdd\x6e\x6a\x1b\x69\x0c\xeb\x21\xd3\x6a\x6e\xab\x3f\xd9\x89\xb9\x0e\xd2\x02\x59\x2f\xea\x6e\xd6\xd2\xc1\xa9\x5e\xf5\x91\x3d\xd4\xaf\x16\xe1\xf6\xd2\xd9\x59\xbe\x4d\x30\x57\x6b\xac\xb5\xb7\x90\x0e\x06\x94\xfc\xfe\xc5\xd1\x66\xd6\xc3\xea\xdd\x93\xe0\xff\xf2\x0f\x0b\x5b\x68\x9b\x01\x03\xfe\x10\x13\xd9\x05\x31\x83\x78\x03\x04\x19\x92\xd9\xed\xec\x99\xe1\x71\xb5\x7e\x9e\x6d\x72\xef\x87\x59\x4c\x04\x0f\x50\xb7\xb2\x6a\xd8\x0d\x40\x1b\x62\xd2\x56\x57\xa8\x90\x56\x3f\x9e\x7b\x2c\x6e\x5a\xbf\x21\xd9\x76\x1b\x74\x4f\xd0\x6e\xf1\x9e\x76\xdf\x69\x9b\x9f\x9d\x31\xf2\x44\xbb\xd5\xdc\x07\x06\x4f\xa7\xf5\xbb\xec\x0f\x20\x48\x8c\x4d\xab\x76\x3a\x65\x44\xd6\x18\xed\x4c\x42\xc7\x88\x4e\x29\xc6\xb8\x45\x49\x12\xbd\xeb\x18\xbf\x77\xbc\xae\x10\xec\xe9\xd2\x1f\x39\xdd\x81\x78\x00\xcb\xea\x4d\x89\x83\x66\xb1\x7e\xc5\x62\xef\xa9\x6b\x8d\x88\xae\xf0\xe9\x20\xdf\xe7\x48\xac\xed\xf8\x6f\xcf\x10\x6a\x7a\x5b\xab\xcd\x77\xbd\xac\xc3\x30\x77\x7b\x57\x83\x7f\x33\xff\x2d\x97\x0d\x27\x58\x59\x69\xe1\x62\x05\x09\x31\x61\xf6\x58\xcb\xf2\x3f\x84\x68\xf7\x24\xee\xb3\x67\x2a\x15\x6b\x26\x4f\xd5\x63\xd9\x66\xbe\xbe\xa3\x6f\x35\xc7\xf3\x32\x54\x32\x2c\x2b\xc5\xa7\x14\xd5\xb6\x4d\x8c\x77\x64\x83\x20\xd2\x78\x8d\xaa\x94\xc5\xdf\x5f\xba\x09\x51\xd4\x1a\xf0\x96\x22\x32\x5d\xd9\x54\xd9\x51\xaa\xd9\x5b\xbb\xa0\x4d\x60\x63\x18\x90\x34\x32\x2b\x78\x5a\x62\x1d\x17\x3c\x4e\xe3\xb2\xa9\xb4\x43\x40\x22\xed\xf9\x57\x73\x54\xaf\x65\x65\xe8\x5e\x2d\x7f\x25\xb7\x96\xfd\x8e\xa2\xda\x6e\x73\x95\xbb\xb6\x75\xa0\x06\xd9\x7f\x18\x50\xd3\x61\xd9\xa7\x83\xbb\x3e\xd2\xd0\xc2\xb5\x75\xe8\xd1\xc6\xa4\xa1\xdd\x7f\xcf\x0a\x19\xce\xb3\xa9\xd1\xae\x66\xea\x19\x03\x55\xdc\xa0\xe2\x64\xee\x9c\x4e\x6f\x85\x21\xb7\xd6\x06\x26\xe4\xba\x74\x66\xe0\xe5\xd6\x58\xf3\x98\x47\x44\x59\xeb\x98\x46\x17\x84\x8b\x9b\x10\x15\x5e\x00\x8d\x48\xaa\xd1\xb6\x12\x01\xe7\x7f\x7f\xed\x72\x04\x8c\x51\x98\x59\xc1\x28\xd5\x79\xfd\xd6\xaa\xaa\x73\x16\x76\x53\x0a\xc4\x18\xc5\xd7\xa9\x41\x0d\x0b\xa0\x32\x4a\x63\x51\xa7\x22\x94\xca\x54\x98\x39\x14\xec\x5e\x49\x05\x78\x4b\xe2\x24\xc2\x19\x70\x01\xee\x6e\x4d\x36\x87\x8a\xe3\x35\x5a\xe4\xac\xf6\xd5\xfe\x18\x80\x40\xaa\x51\x59\xe6\xa5\x8a\x86\x28\xb7\xa9\x76\x04\x97\xf1\xf6\x72\x35\x29\x5e\x5e\x5e\x5e\xea\x4f\x51\x45\x0b\xdf\x19\x22\x7e\x85\x30\x8d\xb7\x7f\x98\x56\x49\xcb\x7e\x1f\x76\x8d\x0e\x94\x08\x20\x91\x96\xb0\x46\xbf\x31\x47\x06\xd2\x06\x56\x54\xfb\xde\x65\x7e\x80\x92\x3a\x5d\x17\x6e\xa0\x3d\xe0\xa1\xab\xf5\x5e\x06\x52\x3e\x5f\x13\x75\x39\xeb\xd4\xa9\xda\xf7\xc2\x63\xe5\xfc\x0a\xb7\xf0\x1c\xa6\x81\x94\x53\x20\x82\xb5\xd2\x5c\x93\x28\x45\x4b\xb5\x26\xaa\xc3\x0a\x3f\xfb\xe9\xab\x7a\x96\x98\x1a\x8b\xe4\xd7\x9c\x21\x9b\x81\x54\xc0\x3d\x8d\xe7\xc6\x35\x60\x9c\x98\xed\xcc\xb6\x95\xa7\x4c\x3b\x73\x69\x42\x62\x5c\x8b\x9d\x10\x08\x89\x86\x04\x55\xcc\xb5\xcd\xa7\xac\x81\x34\x22\xdc\xf0\x28\x82\x75\x39\xcf\x3e\xba\x91\xcd\x87\x62\x69\x76\x5f\xab\x1e\xa2\x59\xe3\x03\xc4\xa8\x9f\xdd\xf5\xf6\xde\xa3\x34\x67\x3c\x2c\x50\xd7\xa9\xd9\x3b\x58\x1b\x61\xba\xa7\x03\x17\xb3\xea\x5e\x7b\xbf\xcd\x03\x6d\x40\x28\x12\x4d\xdb\xbd\xef\xad\x3a\x6c\x4c\xb8\x20\x82\x5d\x40\xc0\x95\x36\x30\x5c\x88\x99\xef\xf1\xa6\x57\xa6\xfb\x8a\x08\x21\x01\x6f\x93\x88\x53\x6e\xbc\x0a\x1e\xc0\x9c\xc7\xe7\xe0\x32\xd8\xd1\xfd\x35\xc3\xba\x9f\xfb\xb6\xfb\x71\xf3\xd4\xc9\xa3\x5d\xc9\x21\x8e\xc9\x99\x46\xab\xbf\xc5\xbc\xfc\x7a\xb4\x1f\xcd\xce\xd2\x1a\x77\x02\x15\xe0\x95\x7f\x2d\x03\x0b\x44\x67\xda\xa8\x94\x9a\x54\x59\x8e\xc2\x25\x4e\x2e\x3d\xd5\x76\x36\xe0\x59\xf1\xf6\x87\xf9\x33\xc7\xf6\x07\x10\xd2\xb8\xb3\x95\x92\xe1\x33\x6d\x72\xa2\x6f\x21\x46\x22\xb4\xf3\x0a\x47\xef\x18\x42\xc1\xa6\xe8\xf3\x93\x77\xe4\x95\xf7\x6a\x42\x43\x38\xaf\xa0\xa2\x95\x7d\x83\x06\x38\x9b\xb9\x13\xbe\x19\x24\x11\x11\xdf\x70\xe6\x64\xbc\xe2\x82\x3d\x71\xbf\x3c\x78\xc2\x37\xc5\x70\xfa\x49\xcd\xbb\x8a\xdf\x92\xc6\x8e\x61\x1d\xda\xcf\xce\x4a\xd7\xf1\xdd\x9f\x73\x36\x73\x03\xda\xf1\xe6\x9c\xf9\x7f\xed\x80\xb3\x0c\xa8\xbf\xad\xf7\x42\x43\xc3\xd7\xee\xcd\xf3\x5a\xc1\xbf\x1c\xbc\xd7\x61\xfe\x1f\x00\x00\xff\xff\xb9\x78\x15\xf5\xa4\x49\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 18852, mode: os.FileMode(493), modTime: time.Unix(1705677855, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
